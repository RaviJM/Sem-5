# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CIrZzhBTygpFQqPrfvae61O2FgHYcdXo
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#making a list of numbers between 0 to 11
l = [i for i in range(1,11)]
#printing the type of l
print("type of l: ",type(l))
#printing list
print("list: ",l)

#convering list into pandas
l_series = pd.Series(l)
print(l_series)
print("type of l_series: ",type(l_series))
print(l_series.dtype)
l_series.astype(float).dtype

#making list of square of numbers in range (1,11) for numbers greater than 4
lst = [i*i for i in range(1,11) if i > 4]
print(lst)
print()

st = 'ravimakwana'
#printing string
print(st)
print()

#printing consonants in string
print("Printing consonants in string: ")
l1 = [ch for ch in st if ch not in ['a','e','i','o','u']]
print(l1)
print()

#printing number of vowels in string
print("Printing number of vowels in string: ")
count=0
l2 = [i for i in st if i in ['a','e','i','o','u']]
print(l2)
print("\nNumber of vowels in string: ", len(l2))

import os
#listing the files and directories
print(os.listdir())

beng_csv = "Bengaluru_House_Data.csv"
beng_df = pd.read_csv(beng_csv)
#printing first 5 rows of the csv data
print(beng_df.head())
print()
print()

#printing all columns
print()
print(beng_df.columns)
print()

#shape gives number of rows and columns
sz = beng_df.shape
print("Number of rows: ",sz[0])
print("Number of columns: ",sz[1])

#getting the column index of a column using column name
print()
print("Index of 'location' column: ", beng_df.columns.get_loc("location"))
print()

#Percentage of each columns having null values
print("Percentage of each columns having null values: ")
beng_df.isnull().sum()/beng_df.shape[0]*100

#using iloc to select and print specific rows and columns
print("Printing first 10 rows of society column")
col=beng_df.columns.get_loc('society')
beng_df.iloc[0:10,col]

#printing all rows of 'size' column
print("Printing all rows of 'size' column")
beng_df.iloc[:,beng_df.columns.get_loc('size')]

#printing all first 10 rows but not the column 'society'
print("Printing first 10 rows of csv but not the columns 'society'")
beng_df.loc[0:9, [col for col in beng_df.columns if col != 'society']]

#the mode function that gives the mode value of all the values in that column
balcony_mode=beng_df['balcony'].mode()[0]
print("The mode of the 'balcony' column is: ",balcony_mode)
print()

#printing indices of all rows where the 'balcony' column in empty [result is in the form of a list]
balcony_null_indices=beng_df[beng_df.loc[:,'balcony'].isnull() == True].index
print(balcony_null_indices)
print()

#filling all the empty values of 'balcony' with the mode value we got above
beng_df.loc[balcony_null_indices,'balcony']=balcony_mode
#printing the first 15 values to see if records are modified or not
print("First 15 records:")
print(beng_df.head(15))

#the median function that gives the median value of all the values in that column
bath_median=beng_df['bath'].median()
print("Median of all values in 'bath' column is: ", bath_median)
print()

#filling all the empty values of 'bath' with the median value we got above
bath_null_indices=beng_df[beng_df.loc[:,'bath'].isnull() == True].index
beng_df.loc[bath_null_indices,'bath']=bath_median
beng_df.head(20)

#changing the data types of columns from float to int for using it in plotting a graph
print("Data type of 'bath' column Before changing: ",beng_df['bath'].dtype)
print("Data type of 'balcony' column Before changing: ",beng_df['balcony'].dtype)
beng_df['bath']=beng_df['bath'].astype('int')
beng_df['balcony']=beng_df['balcony'].astype('int')
print("Data type of 'bath' column After changing: ",beng_df['bath'].dtype)
print("Data type of 'balcony' column After changing: ",beng_df['balcony'].dtype)

x=beng_df.loc[1:10,'total_sqft']
y=beng_df.loc[1:10,'price']

#creating arrrays
x=np.array(x)
y=np.array(y)
print()

#plotting the graph
plt.title("Plot for Price vs Area of land")
plt.xlabel('Area (in sqft)')
plt.ylabel('Price')
plt.plot(x,y)